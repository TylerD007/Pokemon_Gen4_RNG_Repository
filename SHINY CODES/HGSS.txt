
 * -----------------------------------------------------------------------*
 *		  POKÉMON HEARTGOLD/SOULSILVER (US VERSION)		  *
 * 		ACTION REPLAY - LEGAL SHINY POKÉMON ENCOUNTERS		  *	
 * -----------------------------------------------------------------------*
 * Programmed in ARM/THUMB and converted to the Action Replay code syntax *
 * Copyright (C) 2023 Ciro Bogea Fernandes.				  *
 * email: cirobfes@hotmail.com						  *
 * -----------------------------------------------------------------------*

**********************************
COPYRIGHT DISCLAIMER
**********************************

 * This library is free software. You can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation;

 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

 * Permission to use these codes and its documentation *AS IT IS* for any purpose
 * is hereby granted without fee, provided that the above copyright notice appear 
 * in all copies and that both that copyright notice and this permission notice appear
 * in supporting documentation.  It is provided "as is" without express or implied warranty. 

**********************************
INTRODUCTION
**********************************

In Pokémon HeartGold/SoulSilver, the player can find pokémon through a wide variety of 
forms, such as battles, gifts, eggs and special events. Depending on the type of encounter,
the game uses a different function to compute the pokémon attributes, based on an ordered
set of numbers called RNG (random number generator). 

Taking as example the function that calculates the attributes of pokémon found in 
tall grass/dungeon areas, the first RNG call decides whether a battle is to be triggered
or not, the second RNG is used to define the pokémon species (out of a list of ten or 
eleven encounter slots) and the third call sets the nature. Then, the function enters
in a loop state, calling the RNG twice on each cycle, to produce the so called PID 
(pokémon identification number). The PID is the most important number in the pokémon 
data structure. It is used to define many attributes, like nature, gender and shininess. 
When the game finds a PID, whose correspondent nature is equal to the nature set in the 
third RNG call, the function breaks the loop. Finally, the last two RNG calls define 
the pokémon IVs.

The routine used for tall grass/dungeon establishes the stardard pokémon calculation
in HeartGold/SoulSilver. This routine is called *Method K*. The functions for other 
encounter types (surfing, fishing, etc.) are variations of the standard Method K, with 
slight modifications. Some may lack the battle trigger RNG call, some may have additional 
RNG calls, some may even loop the entire routine a set amount of times, but in the end, 
they all share the basic pattern described above.

The Action Replay codes in this document intercept the function that calculates the pokémon 
data structure, advance the RNG until a valid shiny RNG is found and return the code execution 
to its normal state, to let the game calculate the pokémon based on the shiny RNG. In other
words, the AR codes force the game to always use RNGs that result in shiny pokémon. The codes 
*do not* change any other information besides the current RNG. Because of that, any shiny pokémon
caught while the codes are activated are *100% legal*. The pokémon species, nature, PID, 
IVs, as well as any other attribute, match the results from an existing and obtainable set of
RNGs in the game.

**********************************
WARNINGS
**********************************

Please, read the following notes thoroughly before using the codes.

1. If the leading pokémon in your party has a nature that affects the opposing wild pokémon
attributes, such as Cute Charm, Synchronize or Pressure, the game executes additional RNG 
calls to compute those effects. Since the extra RNG calls modify the RNG allignment established
by our codes, the codes ***DO NOT*** work, if the leading pokémon has a nature with 
overworld effects.

2. Do not use more than one type of code at the same time in any circunstance. Since the 
codes write different instruction routines to the same memory block, using more than one code
may cause crashes and other unexpected behaviours.

3. When the trainer walks on grass, surfs on water, uses the fishing rod ou smashes rocks,
the game performs a RNG call to define if a battle has to be triggered or not. Each area/action
has a different encounter rate, as follows:
3.1. Grass:			25 out of 100, every step.
3.2. Dungeons:			10 out of 100, every step.
3.3. Surfing:			10 out of 100, every step.
3.4. Old rod:			75 out of 100, each cast.
3.5. Good rod:			100 out of 100, each cast.
3.6. Super rod:			100 out of 100, each cast.
3.7. Rock smash:		30 out of 100, each rock.
3.8. Safari zone (grass):	20 out of 100, every step.
3.9. Safari zone (surf):	15 out of 100, every step.
3.10.Sweet scent/Honey:		no encounter check.

If a RNG that does not trigger a battle preceeds a shiny RNG, the shiny RNG is considered 
invalid, since no pokémon can be fought at all. The lower the encounter rate in the area is,
the more difficult it is to find a valid shiny RNG. For example, as the player surfs on
calm water, only 10% of the total amount of shiny RNGs are valid! If the player uses 
Sweet Scent/Honey to attice wild pokémon, no encounter check is performed, though. Consequently, 
using Sweet Scent/Honey grants the maximum range of valid shiny RNGs. Sweet Scent/Honey
has no impact on the chances of getting a pokémon with any specific attribute. Since
the player can hit any shiny RNG with Sweet Scent/Honey on grass/dungeon/water areas, 
encounter rates are not taken into consideration to define if a pokémon is legal or not in
those cases.

If the user wants to disable the encounter rate validation, to get the widest spread of shiny
RNGs available, do not activate the portion of code separated from the main body by a blank line,
if it exists. Remember that, without the encounter rate validation, the player will battle 
pokémon he/she would not normally do, but they are still considered legit. It's really up to
the user to decide the level of legitimacy he/she wants.

4. The codes add extra computational demand to the game hardware, that is obviously not
originally programmed. As a consequence, the codes will cause lag. In most cases, the lag is
unnoticeable, but it can reach half a second, particularly in low encounter rate areas.
Disabling the encounter rate validation code portion reduces the lag considerably.

**********************************
1. GRASS/DUNGEON POKÉMON
**********************************

52247674 f6ab2164
1224767a 0000f7fe
1224767c 0000f8c1

52247688 0000bd10
1224768e 0000f7fd
12247690 0000ffb7
522455fc 00000000
02245600 b08cb5f0
02245604 f904f000
02245608 21846878
0224560c 18406800
02245610 0c016800
02245614 0c000400
02245618 91019000
0224561c 68016838
02245620 9d009102
02245624 68389e01
02245628 60019902
0224562c 1c040c08
02245630 fb88f5da
02245634 40611c01
02245638 40714069
0224563c daf62908
02245640 68016838
02245644 f5da9102
02245648 f000fb7d
0224564c 0405f8e9
02245650 f8e6f000
02245654 21194328
02245658 eaa4f6ad
0224565c 0e000608
02245660 f0001c04
02245664 0405f8dd
02245668 f6ad2119
0224566c 0608e996
02245670 42a00e00
02245674 f000d00a
02245678 4328f8d3
0224567c f6ad2119
02245680 0608ea92
02245684 42a00e00
02245688 e7ead0cb
0224568c f8c8f000
02245690 2e0068be
02245694 f000d00c
02245698 2164f8c3
0224569c e97cf6ad
022456a0 0c000408
022456a4 d2bc42b0
022456a8 fb4cf5da
022456ac 60be2600
022456b0 bdf0b00c
02245800 0408b580
02245804 42a00c00
02245808 4f02d201
0224580c bd8060bc
02245810 47704f00
02245814 02245900
02245820 48056839
02245824 1c13680a
02245828 48044343
0224582c 600818c0
02245830 04000c00
02245834 47700c00
02245838 eeb9eb65
0224583c 0a3561a1
02245840 f7ffb500
02245844 211fffed
02245848 223e4001
0224584c 40020112
02245850 231f0952
02245854 4003029b
02245858 bd000a9b
02245900 021d15a8
02245904 02111880
d0000000 00000000

**********************************
2. STATIONARY POKÉMON
**********************************
   2.1. Stationary pokémon are wild pokémon with overworld sprites: Sudowoodo, Lapras,
	Electrodes in Rocket Hideout, Lugia, Ho-oh, Snorlax, Suicune, the legendary
	birds, Mewtwo, Groudon, Kyogre and Rayquaza. Codes must be activated when
	you interact with the pokémon.
**********************************

5224788c bd100e00
02247890 feb6f7fd
522455fc 00000000
02245600 b08cb5f0
02245604 f904f000
02245608 21846878
0224560c 18406800
02245610 0c016800
02245614 0c000400
02245618 91019000
0224561c 68016838
02245620 9d009102
02245624 68389e01
02245628 60019902
0224562c 1c040c08
02245630 fb88f5da
02245634 40611c01
02245638 40714069
0224563c daf62908
02245640 68016838
02245644 f5da9102
02245648 f000fb7d
0224564c 0405f8e9
02245650 f8e6f000
02245654 21194328
02245658 eaa4f6ad
0224565c 0e000608
02245660 f0001c04
02245664 0405f8dd
02245668 f6ad2119
0224566c 0608e996
02245670 42a00e00
02245674 f000d00a
02245678 4328f8d3
0224567c f6ad2119
02245680 0608ea92
02245684 42a00e00
02245688 e7ead0cb
0224568c f8c8f000
02245690 fb58f5da
02245694 bdf0b00c
02245800 0408b580
02245804 42a00c00
02245808 4f02d201
0224580c bd8060bc
02245810 47704f00
02245814 02245900
02245820 48056839
02245824 1c13680a
02245828 48044343
0224582c 600818c0
02245830 04000c00
02245834 47700c00
02245838 eeb9eb65
0224583c 0a3561a1
02245840 f7ffb500
02245844 211fffed
02245848 223e4001
0224584c 40020112
02245850 231f0952
02245854 4003029b
02245858 bd000a9b
02245900 021d15a8
02245904 02111880
d0000000 00000000

**********************************
3. STARTERS/ROAMING/FOSSIL/GIFT POKÉMON
**********************************
   3.1. Starters, roaming, fossil and gift pokémon are calculated according to Method 1.
   3.2. Starters are the Johto, Kanto and Hoenn starter trios. Codes must be activated
	when you choose the pokémon.
   3.3. Roaming pokémon are Raikou, Entei, Latios and Latias. Codes must be activated when
	the trainer wakes up Raikou and Entei in the Burned Tower or when the trainer leaves
	the Pokémon Fan Club in Vermillion City and Steve tells a legendary pokémon started
	roaming Kanto.
   3.4. Codes must be activated when you revive the fossil pokémon in Pewter City.
   3.5. Gift pokémon are Togepi received from Prof. Elm's assistent, Eevee received from
	Bill and ExtremeSpeed Dratini received in the Dragon's Den. Codes must be activated
	when you receive the pokémon.
**********************************

5206dee4 2800980c
1206deea 0000f1d7
1206deec 0000fb89
02245600 b08cb5f0
02245604 f904f000
02245608 21846878
0224560c 18406800
02245610 0c016800
02245614 0c000400
02245618 91019000
0224561c 68016838
02245620 9d009102
02245624 68389e01
02245628 60019902
0224562c 1c040c08
02245630 fb88f5da
02245634 40611c01
02245638 40714069
0224563c daf62908
02245640 68016838
02245644 f0009102
02245648 b00cf8eb
0224564c 0000bdf0
02245800 0408b580
02245804 42a00c00
02245808 4f02d201
0224580c bd8060bc
02245810 47704f00
02245814 02245900
02245820 48056839
02245824 1c13680a
02245828 48044343
0224582c 600818c0
02245830 04000c00
02245834 47700c00
02245838 eeb9eb65
0224583c 0a3561a1
02245840 f7ffb500
02245844 211fffed
02245848 223e4001
0224584c 40020112
02245850 231f0952
02245854 4003029b
02245858 bd000a9b
02245900 021d15a8
02245904 02111880
d0000000 00000000

**********************************
4. SURFING
**********************************

52247674 f6ab2164
1224767a 0000f7fe
1224767c 0000f8c1

5224771c 0000bd08
12247722 0000f7fd
12247724 0000ff6d
522455fc 00000000
02245600 b08cb5f0
02245604 f904f000
02245608 21846878
0224560c 18406800
02245610 0c016800
02245614 0c000400
02245618 91019000
0224561c 68016838
02245620 9d009102
02245624 68389e01
02245628 60019902
0224562c 1c040c08
02245630 fb88f5da
02245634 40611c01
02245638 40714069
0224563c daf62908
02245640 68016838
02245644 f5da9102
02245648 f000fb7d
0224564c 0405f8e9
02245650 f8e6f000
02245654 21194328
02245658 eaa4f6ad
0224565c 0e000608
02245660 f0001c04
02245664 0405f8dd
02245668 f6ad2119
0224566c 0608e996
02245670 42a00e00
02245674 f000d00a
02245678 4328f8d3
0224567c f6ad2119
02245680 0608ea92
02245684 42a00e00
02245688 e7ead0cb
0224568c f8c8f000
02245690 f8c6f000
02245694 2e0068be
02245698 f000d00c
0224569c 2164f8c1
022456a0 e97af6ad
022456a4 0c000408
022456a8 d2ba42b0
022456ac fb4af5da
022456b0 60be2600
022456b4 bdf0b00c
02245800 0408b580
02245804 42a00c00
02245808 4f02d201
0224580c bd8060bc
02245810 47704f00
02245814 02245900
02245820 48056839
02245824 1c13680a
02245828 48044343
0224582c 600818c0
02245830 04000c00
02245834 47700c00
02245838 eeb9eb65
0224583c 0a3561a1
02245840 f7ffb500
02245844 211fffed
02245848 223e4001
0224584c 40020112
02245850 231f0952
02245854 4003029b
02245858 bd000a9b
02245900 021d15a8
02245904 02111880
d0000000 00000000

**********************************
5. FISHING (OLD, GOOD OR SUPER ROD)
**********************************

52246fc8 ece6f6ab
02246fcc fc18f7fe
52247760 0000bd08
12247766 0000f7fd
12247768 0000ff4b
522455fc 00000000
02245600 b08cb5f0
02245604 f904f000
02245608 21846878
0224560c 18406800
02245610 0c016800
02245614 0c000400
02245618 91019000
0224561c 68016838
02245620 9d009102
02245624 68389e01
02245628 60019902
0224562c 1c040c08
02245630 fb88f5da
02245634 40611c01
02245638 40714069
0224563c daf62908
02245640 68016838
02245644 f5da9102
02245648 f000fb7d
0224564c 0405f8e9
02245650 f8e6f000
02245654 21194328
02245658 eaa4f6ad
0224565c 0e000608
02245660 f0001c04
02245664 0405f8dd
02245668 f6ad2119
0224566c 0608e996
02245670 42a00e00
02245674 f000d00a
02245678 4328f8d3
0224567c f6ad2119
02245680 0608ea92
02245684 42a00e00
02245688 e7ead0cb
0224568c f8c8f000
02245690 f8c6f000
02245694 2e0068be
02245698 f000d00c
0224569c 2164f8c1
022456a0 e97af6ad
022456a4 0c000408
022456a8 daba42b0
022456ac fb4af5da
022456b0 60be2600
022456b4 bdf0b00c
02245800 0408b580
02245804 42a00c00
02245808 4f02da01
0224580c bd8060bc
02245810 47704f00
02245814 02245900
02245820 48056839
02245824 1c13680a
02245828 48044343
0224582c 600818c0
02245830 04000c00
02245834 47700c00
02245838 eeb9eb65
0224583c 0a3561a1
02245840 f7ffb500
02245844 211fffed
02245848 223e4001
0224584c 40020112
02245850 231f0952
02245854 4003029b
02245858 bd000a9b
02245900 021d15a8
02245904 02111880
d0000000 00000000

**********************************
6. HEADBUTT
**********************************

522477bc bd080e00
122477c2 0000f7fd
122477c4 0000ff1d
522455fc 00000000
02245600 b08cb5f0
02245604 f904f000
02245608 21846878
0224560c 18406800
02245610 0c016800
02245614 0c000400
02245618 91019000
0224561c 68016838
02245620 9d009102
02245624 68389e01
02245628 60019902
0224562c 1c040c08
02245630 fb88f5da
02245634 40611c01
02245638 40714069
0224563c daf62908
02245640 68016838
02245644 f5da9102
02245648 f000fb7d
0224564c 0405f8e9
02245650 f8e6f000
02245654 21194328
02245658 eaa4f6ad
0224565c 0e000608
02245660 f0001c04
02245664 0405f8dd
02245668 f6ad2119
0224566c 0608e996
02245670 42a00e00
02245674 f000d00a
02245678 4328f8d3
0224567c f6ad2119
02245680 0608ea92
02245684 42a00e00
02245688 e7ead0cb
0224568c f8c8f000
02245690 f8c6f000
02245694 bdf0b00c
02245800 0408b580
02245804 42a00c00
02245808 4f02d201
0224580c bd8060bc
02245810 47704f00
02245814 02245900
02245820 48056839
02245824 1c13680a
02245828 48044343
0224582c 600818c0
02245830 04000c00
02245834 47700c00
02245838 eeb9eb65
0224583c 0a3561a1
02245840 f7ffb500
02245844 211fffed
02245848 223e4001
0224584c 40020112
02245850 231f0952
02245854 4003029b
02245858 bd000a9b
02245900 021d15a8
02245904 02111880
d0000000 00000000

**********************************
7. ROCK SMASH
**********************************

522470f4 2164fe27
022470f8 fb82f7fe
52247798 bd082004
1224779e 0000f7fd
122477a0 0000ff2f
522455fc 00000000
02245600 b08cb5f0
02245604 f904f000
02245608 21846878
0224560c 18406800
02245610 0c016800
02245614 0c000400
02245618 91019000
0224561c 68016838
02245620 9d009102
02245624 68389e01
02245628 60019902
0224562c 1c040c08
02245630 fb88f5da
02245634 40611c01
02245638 40714069
0224563c daf62908
02245640 68016838
02245644 f5da9102
02245648 f000fb7d
0224564c 0405f8e9
02245650 f8e6f000
02245654 21194328
02245658 eaa4f6ad
0224565c 0e000608
02245660 f0001c04
02245664 0405f8dd
02245668 f6ad2119
0224566c 0608e996
02245670 42a00e00
02245674 f000d00a
02245678 4328f8d3
0224567c f6ad2119
02245680 0608ea92
02245684 42a00e00
02245688 e7ead0cb
0224568c f8c8f000
02245690 f8c6f000
02245694 2e0068be
02245698 f000d00a
0224569c 2164f8c1
022456a0 e97af6ad
022456a4 dabc42b1
022456a8 fb4cf5da
022456ac 60be2600
022456b0 bdf0b00c
02245800 f6adb580
02245804 42a1e8ca
02245808 4f02da01
0224580c bd8060bc
02245810 47704f00
02245814 02245900
02245820 48056839
02245824 1c13680a
02245828 48044343
0224582c 600818c0
02245830 04000c00
02245834 47700c00
02245838 eeb9eb65
0224583c 0a3561a1
02245840 f7ffb500
02245844 211fffed
02245848 223e4001
0224584c 40020112
02245850 231f0952
02245854 4003029b
02245858 bd000a9b
02245900 021d15a8
02245904 02111880
d0000000 00000000

**********************************
8. BUG-CATCHING CONTEST
**********************************
   8.1. The bug-catching contest, as well as the safari zone, host a very peculiar Method K
	variation. The game attemps four times to create a pokémon with 31 IV in at least
	one stat. If it fails, the last pokémon created is selected. Curiously, the safari
	zone in DPPl does not display the same feature.
**********************************

52247674 f6ab2164
1224767a 0000f7fe
1224767c 0000f8c1

52247ed8 b083b578
02247edc fb8ef7fd
522455f8 00000000
022455fc 1c1d1c0e
02245600 b08cb5ff
02245604 f904f000
02245608 21846878
0224560c 18406800
02245610 0c016800
02245614 0c000400
02245618 91019000
0224561c 68016838
02245620 9d009102
02245624 68389e01
02245628 60019902
0224562c 1c040c08
02245630 fb88f5da
02245634 40611c01
02245638 40714069
0224563c daf62908
02245640 68016838
02245644 f5da9102
02245648 f5dafb7d
0224564c f5dafb7b
02245650 2600fb79
02245654 f0002500
02245658 291ff8f3
0224565c 3501d100
02245660 d1002a1f
02245664 2b1f3501
02245668 3501d100
0224566c f8e8f000
02245670 d100291f
02245674 2a1f3501
02245678 3501d100
0224567c d1002b1f
02245680 95043501
02245684 f8ccf000
02245688 f0000405
0224568c 4328f8c9
02245690 f6ad2119
02245694 0608ea88
02245698 1c040e00
0224569c f8c0f000
022456a0 21190405
022456a4 e978f6ad
022456a8 0e000608
022456ac d00a42a0
022456b0 f8b6f000
022456b4 21194328
022456b8 ea74f6ad
022456bc 0e000608
022456c0 d0ae42a0
022456c4 3601e7ea
022456c8 2e049d04
022456cc 2d00da02
022456d0 e7bfd100
022456d4 d0022e01
022456d8 d0002d00
022456dc f000e7a1
022456e0 f000f89f
022456e4 f000f89d
022456e8 68bef89b
022456ec d00c2e00
022456f0 f896f000
022456f4 f6ad2164
022456f8 0408ea56
022456fc 42b00c00
02245700 f5dad28f
02245704 2600fb1f
02245708 b00c60be
0224570c 0000bdff
02245800 0408b580
02245804 42a00c00
02245808 4f02d201
0224580c bd8060bc
02245810 47704f00
02245814 02245900
02245820 48056839
02245824 1c13680a
02245828 48044343
0224582c 600818c0
02245830 04000c00
02245834 47700c00
02245838 eeb9eb65
0224583c 0a3561a1
02245840 f7ffb500
02245844 211fffed
02245848 223e4001
0224584c 40020112
02245850 231f0952
02245854 4003029b
02245858 bd000a9b
02245900 021d15a8
02245904 02111880
d0000000 00000000

**********************************
9. SAFARI ZONE (GRASS, SURFING AND FISHING)
**********************************
   9.1. The safari zone, as well as the bug-catching contest, host a very peculiar Method K
	variation. The game attemps four times to create a pokémon with 31 IV in at least
	one stat. If it fails, the last pokémon created is selected. Curiously, the safari
	zone in DPPl does not display the same feature.
   9.2. The safari zone codes work for all pokémon fought on grass, water or fishing.
**********************************

52247674 f6ab2164
1224767a 0000f7fe
1224767c 0000f8c1

52246fc8 ece6f6ab
02246fcc fc18f7fe
52247e50 d1062800
02247e54 fbd4f7fd
522455fc 00000000
02245600 b08cb5f0
02245604 f904f000
02245608 21846878
0224560c 18406800
02245610 0c016800
02245614 0c000400
02245618 91019000
0224561c 68016838
02245620 9d009102
02245624 68389e01
02245628 60019902
0224562c 1c040c08
02245630 fb88f5da
02245634 40611c01
02245638 40714069
0224563c daf62908
02245640 68016838
02245644 f5da9102
02245648 f5dafb7d
0224564c f5dafb7b
02245650 2600fb79
02245654 f0002500
02245658 291ff8f3
0224565c 3501d100
02245660 d1002a1f
02245664 2b1f3501
02245668 3501d100
0224566c f8e8f000
02245670 d100291f
02245674 2a1f3501
02245678 3501d100
0224567c d1002b1f
02245680 95043501
02245684 f8ccf000
02245688 f0000405
0224568c 4328f8c9
02245690 f6ad2119
02245694 0608ea88
02245698 1c040e00
0224569c f8c0f000
022456a0 21190405
022456a4 e978f6ad
022456a8 0e000608
022456ac d00a42a0
022456b0 f8b6f000
022456b4 21194328
022456b8 ea74f6ad
022456bc 0e000608
022456c0 d0ae42a0
022456c4 3601e7ea
022456c8 2e049d04
022456cc 2d00da02
022456d0 e7bfd100
022456d4 d0022e01
022456d8 d0002d00
022456dc f000e7a1
022456e0 68bef89f
022456e4 d00c2e00
022456e8 f89af000
022456ec f6ad2164
022456f0 0408ea5a
022456f4 42b00c00
022456f8 f5dad293
022456fc 2600fb23
02245700 b00c60be
02245704 0000bdf0
02245800 0408b580
02245804 42a00c00
02245808 4f02d201
0224580c bd8060bc
02245810 47704f00
02245814 02245900
02245820 48056839
02245824 1c13680a
02245828 48044343
0224582c 600818c0
02245830 04000c00
02245834 47700c00
02245838 eeb9eb65
0224583c 0a3561a1
02245840 f7ffb500
02245844 211fffed
02245848 223e4001
0224584c 40020112
02245850 231f0952
02245854 4003029b
02245858 bd000a9b
02245900 021d15a8
02245904 02111880
d0000000 00000000

**********************************
10. EGG POKÉMON
**********************************
   10.1. Since egg PID, and thus shininess, is decided when the egg is generated (i.e., 
	when the Day-Care gentleman calls you with the Pokégear and tells you he found 
	a egg), the codes must be activated while you walk waiting for the breeding.
   10.2. Egg IVs are calculated when you actually receive the egg from the Day-Care man.
	Therefore, egg PID and IVs are unrelated.
**********************************

5206c27c 1c01ffb3
1206c282 0000f1d9
1206c284 0000f9bd
522455fc 00000000
02245600 b08cb5f8
02245604 f8fcf000
02245608 21846838
0224560c 18406800
02245610 0c016800
02245614 0c000400
02245618 91019000
0224561c 9e019d00
02245620 fbcaf5da
02245624 04030c04
02245628 40630c1b
0224562c 4073406b
02245630 daf52b08
02245634 bdf8b00c
02245800 47704f00
02245804 02245900
02245900 02111880
d0000000 00000000

**********************************
A. TECHNICAL INFORMATION
**********************************

The following disassembled code refers to the Method K routine used on grass/dungeon 
encounters. 

**************
A.1 ENCOUNTER RATE INTERCEPTION
**************

Method K function 0x0224766C checks whether a battle is triggered or not. The intercepted instruction
at address 0x0224767A calls function 0x2245800, which stores the encounter rate in memory,
if a battle is to be triggered. The encounter rate value will be used later in the main funciton.

0224766C B510     push    {r4,r14}                                ;
0224766E 1C0C     mov     r4,r1                                   ;r4 contains the encounter rate
02247670 F5D8FB68 bl      Lxx_#0x201FD44                          ;RNG call
02247674 2164     mov     r1,#0x64                                ;
02247676 F6ABE990 blx     Lxx_#0x20F2998                          ;function 0x20f2998 sets r1 with a value between 0 and 100
0224767A F7FEF8C1 bl      Lxx_#0x2245800                          ;encounter rate interception: function 0x2245800 copies r4 to memory, if a battle is triggered
0224767E 42A0     cmp     r0,r4                                   ;
02247680 D201     bcs     Lxx_#0x2247686                          ;if r0 (random value between 0 and 100) is lower than r4 (encounter rate), battle is triggered
02247682 2001     mov     r0,#0x1                                 ;
02247684 BD10     pop     {r4,r15}                                ;returns true (battle)
02247686 2000     mov     r0,#0x0                                 ;
02247688 BD10     pop     {r4,r15}                                ;returns false (no battle)

**************
A.2 ENCOUNTER SLOT INTERCEPTION
**************

Method K function 0x0224768C sets the pokémon species based on the encounter slots available. 
The second interception at address 0x0224768E calls the main function stored at address 0x2245600.

0224768C B508     push    {r3,r14}                                ;
0224768E F7FDFFB7 bl      Lxx_#0x2245600                          ;encounter slot interception: function 0x2245600 advances the current RNG, until a valid shiny RNG is found
02247692 2164     mov     r1,#0x64                                ;from this point on, the function sets the species based on the current RNG
[...]

**************
A.3 MAIN FUNCTION
**************

The main function at address 0x02245600 advances the current RNG, until a valid shiny RNG is found.

02245600 B5F0     push    {r4-r7,r14}                             ;stores registers r4-r7 and r14 in stack
02245602 B08C     add     sp,-#0x30                               ;allocates stack
02245604 F000F904 bl      Lxx_#0x2245810                          ;function 0x2245810 loads r7 with a pointer to address 0x02245900, where a list of constants and variables is stored
02245608 6878     ldr     r0,[r7,#0x4]                            ;loads r0 with main offset pointer address 0x02111880
0224560A 2184     mov     r1,#0x84                                ;r1=0x84
0224560C 6800     ldr     r0,[r0]                                 ;loads r0 with main offset pointer
0224560E 1840     add     r0,r0,r1                                ;r0=offset pointer+0x84, where the trainer id/sid values are stored
02245610 6800     ldr     r0,[r0]                                 ;loads r0 with trainer sid/id
02245612 0C01     lsr     r1,r0,#0x10                             ;r1=trainer sid
02245614 0400     lsl     r0,r0,#0x10                             ;
02245616 0C00     lsr     r0,r0,#0x10                             ;r0=trainer id
02245618 9000     str     r0,[sp]                                 ;stores trainer id in stack
0224561A 9101     str     r1,[sp,#0x4]                            ;stores trainer sid in stack
0224561C 6838     ldr     r0,[r7]                                 ;loads r0 with the current rng address
0224561E 6801     ldr     r1,[r0]                                 ;loads r1 with the current rng
02245620 9102     str     r1,[sp,#0x8]                            ;stores current RNG in stack
02245622 9D00     ldr     r5,[sp]                                 ;loads r5 with trainer id
02245624 9E01     ldr     r6,[sp,#0x4]                            ;loads r6 with trainer sid
02245626 6838     ldr     r0,[r7]                                 ;loads r0 with the current rng address
02245628 9902     ldr     r1,[sp,#0x8]                            ;loads r1 with stored rng in stack
0224562A 6001     str     r1,[r0]                                 ;stores rng in stack as current rng
0224562C 0C08     lsr     r0,r1,#0x10                             ;r0=loword(pid)
0224562E 1C04     mov     r4,r0                                   ;*****here the shiny rng loop begins*****
02245630 F5DAFB88 bl      Lxx_#0x201FD44                          ;function 0x201FD44 advances the current rng
02245634 1C01     mov     r1,r0                                   ;r1=hiword(pid)
02245636 4061     eor     r1,r4                                   ;r1=hiword(pid) xor loword(pid)
02245638 4069     eor     r1,r5                                   ;r1=hiword(pid) xor loword(pid) xor tid
0224563A 4071     eor     r1,r6                                   ;r1=hiword(pid) xor loword(pid) xor tid xor sid
0224563C 2908     cmp     r1,#0x8                                 ;if (hiword(pid) xor loword(pid) xor tid xor sid)<0x8, then the pokémon is shiny
0224563E DAF6     bge     Lxx_#0x224562E                          ;if pokémon is not shiny, loop back to address 0x224562E
02245640 6838     ldr     r0,[r7]                                 ;loads r0 with the current RNG address
02245642 6801     ldr     r1,[r0]                                 ;loads r1 with the current rng
02245644 9102     str     r1,[sp,#0x8]                            ;stores current rng in stack
02245646 F5DAFB7D bl      Lxx_#0x201FD44                          ;function 0x201FD44 advances the current rng
0224564A F000F8E9 bl      Lxx_#0x2245820                          ;function 0x2245820 rewinds the current rng
0224564E 0405     lsl     r5,r0,#0x10                             ;r5=hiword(pid)
02245650 F000F8E6 bl      Lxx_#0x2245820                          ;function 0x2245820 rewinds the current rng
02245654 4328     orr     r0,r5                                   ;r0=pid
02245656 2119     mov     r1,#0x19                                ;
02245658 F6ADEAA4 blx     Lxx_#0x20F2BA4                          ;function 0x20F2BA4 sets r1 with the pokémon nature based on the pid stored in r0
0224565C 0608     lsl     r0,r1,#0x18                             ;
0224565E 0E00     lsr     r0,r0,#0x18                             ;r0=shiny pokémon nature
02245660 1C04     mov     r4,r0                                   ;
02245662 F000F8DD bl      Lxx_#0x2245820                          ;*****here the nature validation loop begins*****
02245666 0405     lsl     r5,r0,#0x10                             ;r5=hiword(tested pid)
02245668 2119     mov     r1,#0x19                                ;
0224566A F6ADE996 blx     Lxx_#0x20F2998                          ;function 0x20F2998 sets r1 with the nature based on the value stored in r0
0224566E 0608     lsl     r0,r1,#0x18                             ;
02245670 0E00     lsr     r0,r0,#0x18                             ;r0=tested nature from rng
02245672 42A0     cmp     r0,r4                                   ;if tested nature from rng=shiny pokémon nature, then shiny rng is valid
02245674 D00A     beq     Lxx_#0x224568C                          ;if shiny rng is valid, break nature validation loop (branch to 0x2245820)
02245676 F000F8D3 bl      Lxx_#0x2245820                          ;function 0x2245820 rewinds the current rng
0224567A 4328     orr     r0,r5                                   ;r0=tested pid
0224567C 2119     mov     r1,#0x19                                ;
0224567E F6ADEA92 blx     Lxx_#0x20F2BA4                          ;function 0x20F2BA4 sets r1 with the pokémon nature based on the pid stored in r0
02245682 0608     lsl     r0,r1,#0x18                             ;
02245684 0E00     lsr     r0,r0,#0x18                             ;r0=tested nature from tested pid
02245686 42A0     cmp     r0,r4                                   ;if tested nature from tested pid=shiny pokémon nature, then shiny rng is invalid
02245688 D0CB     beq     Lxx_#0x2245622                          ;if shiny rng is invalid, get another shiny rng (branch to 0x2245622)
0224568A E7EA     b       Lxx_#0x2245662                          ;nature validation loop (branch to 0x2245662 )
0224568C F000F8C8 bl      Lxx_#0x2245820                          ;function 0x2245820 rewinds the current rng
02245690 68BE     ldr     r6,[r7,#0x8]                            ;loads r6 with the encounter rate stored by function 0x02245800
02245692 2E00     cmp     r6,#0x0                                 ;
02245694 D00C     beq     Lxx_#0x22456B0                          ;if encounter rate=0 (sweet scent/honey), branch to 0x22456B0 (no encounter rate validation)
02245696 F000F8C3 bl      Lxx_#0x2245820                          ;function 0x2245820 rewinds the current rng
0224569A 2164     mov     r1,#0x64                                ;
0224569C F6ADE97C blx     Lxx_#0x20F2998                          ;function 0x20F2998 sets r1 with a value between 0 and 100 based on the current rng
022456A0 0408     lsl     r0,r1,#0x10                             ;
022456A2 0C00     lsr     r0,r0,#0x10                             ;r0 is the encounter value based on the rng
022456A4 42B0     cmp     r0,r6                                   ;
022456A6 D2BC     bcs     Lxx_#0x2245622                          ;if encounter value>=encounter rate, shiny rng is unobtainable (branch to 0x2245622 and get another shiny rng)
022456A8 F5DAFB4C bl      Lxx_#0x201FD44                          ;function 0x201FD44 advances the current rng
022456AC 2600     mov     r6,#0x0                                 ;
022456AE 60BE     str     r6,[r7,#0x8]                            ;sets the stored encounter rate back to 0
022456B0 B00C     add     sp,#0x30                                ;dellocates stack
022456B2 BDF0     pop     {r4-r7,r15}                             ;return function

**************
A.4 AUXILIARY FUNCTION 0x02245800
**************

Function 0x02245800 stores the encounter rate at address 0x2245908, if a battle is triggered.

02245800 B580     push    {r7,r14}                                ;
02245802 0408     lsl     r0,r1,#0x10                             ;
02245804 0C00     lsr     r0,r0,#0x10                             ;r0=encounter value
02245806 42A0     cmp     r0,r4                                   ;r4=encounter rate
02245808 D201     bcs     Lxx_#0x224580E                          ;if encounter value>=encounter rate, no battle is triggered (branch to 0x224580E)
0224580A 4F02     ldr     r7,=Lxx_#0x2245900                      ;
0224580C 60BC     str     r4,[r7,#0x8]                            ;stores encounter rate at address 0x2245908
0224580E BD80     pop     {r7,r15}                                ;return function

**************
A.5 AUXILIARY FUNCTION 0x02245810
**************

Function 0x02245810 loads r7 with a pointer to address 0x02245900, where a list of constants
and variables is stored

02245810 4F00     ldr     r7,=Lxx_#0x2245900                      ;loads r7 with a pointer to address 0x02245900, where a list of constants and variables is stored
02245812 4770     bx      r14                                     ;return function
02245814 5900     ldr     r0,[r0,r4]                              ;constants
02245816 0224     lsl     r4,r4,#0x8                              ;

**************
A.6 AUXILIARY FUNCTION 0x02245820
**************

Function 0x02245820 rewinds the current RNG.

02245820 6839     ldr     r1,[r7]                                 ;loads current rng
02245822 4805     ldr     r0,=Lxx_#0xEEB9EB65                     ;
02245824 680A     ldr     r2,[r1]                                 ;
02245826 1C13     mov     r3,r2                                   ;
02245828 4343     mul     r3,r0                                   ;
0224582A 4804     ldr     r0,=Lxx_#0xA3561A1                      ;
0224582C 18C0     add     r0,r0,r3                                ;
0224582E 6008     str     r0,[r1]                                 ;rng=(rng*0xEEB9EB65)+0xA3561A1
02245830 0C00     lsr     r0,r0,#0x10                             ;
02245832 0400     lsl     r0,r0,#0x10                             ;
02245834 0C00     lsr     r0,r0,#0x10                             ;r0=hiword(rng)
02245836 4770     bx      r14                                     ;return function
02245838 EB65     ????                                            ;constants
0224583A EEB9     ????                                            ;
0224583C 61A1     str     r1,[r4,#0x18]                           ;
0224583E 0A35     lsr     r5,r6,#0x8                              ;

**************
A.7 AUXILIARY FUNCTION 0x02245840
**************

Function 02245840 extracts the iv values from the current rng (only used in the bug-catching
contest and safari zone routines)

02245840 B500     push    {r14}                                   ;
02245842 F7FFFFED bl      Lxx_#0x2245820                          ;
02245846 211F     mov     r1,#0x1F                                ;
02245848 4001     and     r1,r0                                   ;r1=hp/speed iv
0224584A 223E     mov     r2,#0x3E                                ;
0224584C 0112     lsl     r2,r2,#0x4                              ;
0224584E 4002     and     r2,r0                                   ;
02245850 0952     lsr     r2,r2,#0x5                              ;r2=atk/spatk iv
02245852 231F     mov     r3,#0x1F                                ;
02245854 029B     lsl     r3,r3,#0xA                              ;
02245856 4003     and     r3,r0                                   ;
02245858 0A9B     lsr     r3,r3,#0xA                              ;r3=def/spdef iv
0224585A BD00     pop     {r15}                                   ;return function

**************
A.8 LIST OF CONSTANTS AND VARIABLES
**************

02245900 15A8     asr     r0,r5,#0x16                             ;
02245902 021D     lsl     r5,r3,#0x8                              ;current rng address
02245904 1880     add     r0,r0,r2                                ;
02245906 0211     lsl     r1,r2,#0x8                              ;main offset address

**********************************
B. PERSONAL NOTES
**********************************

After some months programming Final Fantasy IX (PSP) codes in MIPS, I decided to take a
different course and try myself out with one my favorite games, Pokémon HG/SS. It was my very first
experience coding in ARM/THUMB and I could say it was a positive one. In general, ARM/THUMB is
not so different from MIPS. The halfword instruction size in THUMB makes the code more compact, but
it also makes some coding techniques way trickier to pull off. The biggest challenge caused by the
halfword instruction size, in my opinion, is the short branch range. In fact, bl instructions have
a range of ±32Mb from the address of the current instruction, which is significantly lower than
the MIPS branches. The short range forces the programmer to find an unused zero memory
block very close to the intercepted address. In our case, we were lucky to find a block with
enough memory space, but I doubt things would run so smooth in other games. Nevertheless, 
putting this issue aside, ARM/THUMB is objectively easier to read, write and modify than MIPS.

Quite often, I stumble upon comments of people who consider GameShark/Action Replay codes
a bad pratice, labeling them as cheating or even hacking. Such opinions make me somewhat sad,
because they are based on critically flawed misconceptions, that reflect how poor our educational
systems are. GameShark/Action Replay codes are in fact machine language, just like MIPS and ARM/THUMB.
The same way a person learns a programming language, like C or Java, he/she can acquire
the proper knowledge to read and write GameShark/Action Replay. Creating codes is equivalent to
programming.

I strongly encourage all readers to learn machine language. It's easy, it's accessible, it's fun. 
Do not get carried away by all weird symbols and terminology. There are very few instructions 
to learn: mov, ldr/str, ldmia/stmia, b, cmp, push/pop, the logical (lsl, lsr, and, orr, eor) and 
the mathematical (add, sub, rsub, mul) operations, nothing more, nothing less. Consider learning 
machine code like learning a language with only a handful of words. I am positive anyone can aquire
very satisfactory skills in just a couple of days. The time investiment is totally worth it. 
The knowledge on machine language will allow you to play and enjoy your favourite games on a brand
new level, like you never did in your life. 

If you want to reach me, send me an email to cirobfes@hotmail.com

EOF
